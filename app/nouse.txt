if(buildingLayer.title === "Building E"){
  // SET ELEVATION OFFSET //
  buildingLayer.elevationInfo = { mode: "absolute-height", offset: 0.5 };
}

/**
*
* @param sceneView
* @param mapView
*/
/*initializeMosaicLayer: function(sceneView, mapView){
return promiseUtils.create((resolve, reject) => {

  // MOSAIC LAYER //
  const mosaicLayer = sceneView.map.layers.find(layer => { return (layer.title === "Orthorectified Mosaics"); });
  mosaicLayer.load().then(() => {
    // OVERRIDE IMAGERY LAYER PROPERTIES //
    mosaicLayer.set({
      minScale: 0,
      maxScale: 0,
      interpolation: "RSP_BilinearInterpolation"
    });

    // MOSAIC LAYERVIEWS //
    const layerViews = new Map();
    sceneView.whenLayerView(mosaicLayer).then(mosaicLayerViewScene => {
      mosaicLayerViewScene.visible = false;
      //layerViews.set("3D", mosaicLayerViewScene);
    });
    mapView.whenLayerView(mosaicLayer).then(mosaicLayerViewMap => {
      layerViews.set("2D", mosaicLayerViewMap);
    });

    this.getMosaicLayerView = () => {
      const viewType = document.querySelector(".view-active").dataset.type;
      if(layerViews.has(viewType)){
        return layerViews.get(viewType);
      } else {
        return sceneView.layerViews.find(layerView => {
          return ((layerView.layer.type === "integrated-mesh") && (layerView.layer.visible));
        });
      }
    };

    // MISSION ID FIELD //
    const missionIdFld = "Dataset_ID";

    // SET MOSAIC BY MISSION //
    this.setMosaicByMission = (flightId) => {
      mosaicLayer.definitionExpression = `${missionIdFld} = '${flightId}'`;
    };
    // CLEAR INITIAL MOSAIC BY MISSION //
    this.setMosaicByMission("none");
    mosaicLayer.visible = true;

    // RESOLVE WITH MOSAIC LAYER //
    resolve(mosaicLayer);
  });
});
},*/



